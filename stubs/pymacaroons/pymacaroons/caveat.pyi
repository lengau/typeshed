from _typeshed import Incomplete
from typing import TypedDict

class _CaveatDict(TypedDict):
    cid: str
    vid: bytes | None
    cl: str

class Caveat:
    def __init__(
        self,
        caveat_id: str | bytes | None = None,
        verification_key_id: str | bytes | None = None,
        location: str | bytes | None = None,
        version: int | None = None,
    ) -> None: ...
    @property
    def caveat_id(self) -> str: ...
    @caveat_id.setter
    def caveat_id(self, value: str | bytes) -> None: ...
    @property
    def verification_key_id(self) -> bytes: ...
    @verification_key_id.setter
    def verification_key_id(self, value: str | bytes | None) -> None: ...
    @property
    def caveat_id_bytes(self) -> bytes: ...
    @property
    def location(self) -> str: ...
    @location.setter
    def location(self, value: str | bytes) -> None: ...
    def first_party(self) -> bool: ...
    def third_party(self) -> bool: ...
    def to_dict(self) -> _CaveatDict: ...
