from collections.abc import Collection

from pymacaroons import Caveat
from pymacaroons.binders import HashSignaturesBinder
from pymacaroons.caveat_delegates import FirstPartyCaveatDelegate, ThirdPartyCaveatDelegate
from pymacaroons.serializers import BaseSerializer, JsonSerializer

MACAROON_V1: int
MACAROON_V2: int

class Macaroon:
    caveats: Collection[Caveat]
    first_party_caveat_delegate: FirstPartyCaveatDelegate
    third_party_caveat_delegate: ThirdPartyCaveatDelegate
    def __init__(
        self,
        location: str | bytes | None = None,
        identifier: str | bytes | None = None,
        key: str | bytes | None = None,
        caveats: str | None = None,
        signature: str | None = None,
        version: int = MACAROON_V1,
    ) -> None: ...
    @classmethod
    def deserialize(cls, serialized: str | bytes | bytearray, serializer: BaseSerializer | JsonSerializer | None = None) -> Macaroon: ...
    @property
    def location(self) -> str: ...
    @property
    def version(self) -> int: ...
    @property
    def identifier(self) -> str | bytes: ...
    @identifier.setter
    def identifier(self, string_or_bytes: str | bytes) -> None: ...
    @property
    def identifier_bytes(self) -> bytes: ...
    @property
    def signature(self) -> str: ...
    @property
    def signature_bytes(self) -> bytes: ...
    def copy(self) -> Macaroon: ...
    def serialize(self, serializer: BaseSerializer | JsonSerializer | None = None) -> str: ...
    def inspect(self) -> str: ...
    def first_party_caveats(self) -> list[Caveat]: ...
    def third_party_caveats(self) -> list[Caveat]: ...
    def prepare_for_request(self, discharge_macaroon: Macaroon) -> HashSignaturesBinder: ...
    def add_first_party_caveat(self, predicate, **kwargs): ...
    def add_third_party_caveat(self, location, key, key_id, **kwargs): ...
